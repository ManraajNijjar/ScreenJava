// Code generated by protoc-gen-go. DO NOT EDIT.
// source: screenpb/screen.proto

package screenpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SampleObject struct {
	FirstInt             int64    `protobuf:"varint,1,opt,name=first_int,json=firstInt,proto3" json:"first_int,omitempty"`
	SecondInt            int64    `protobuf:"varint,2,opt,name=second_int,json=secondInt,proto3" json:"second_int,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SampleObject) Reset()         { *m = SampleObject{} }
func (m *SampleObject) String() string { return proto.CompactTextString(m) }
func (*SampleObject) ProtoMessage()    {}
func (*SampleObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_screen_2b97cf54ce565689, []int{0}
}
func (m *SampleObject) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SampleObject.Unmarshal(m, b)
}
func (m *SampleObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SampleObject.Marshal(b, m, deterministic)
}
func (dst *SampleObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleObject.Merge(dst, src)
}
func (m *SampleObject) XXX_Size() int {
	return xxx_messageInfo_SampleObject.Size(m)
}
func (m *SampleObject) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleObject.DiscardUnknown(m)
}

var xxx_messageInfo_SampleObject proto.InternalMessageInfo

func (m *SampleObject) GetFirstInt() int64 {
	if m != nil {
		return m.FirstInt
	}
	return 0
}

func (m *SampleObject) GetSecondInt() int64 {
	if m != nil {
		return m.SecondInt
	}
	return 0
}

type SampleRequest struct {
	Calculation          *SampleObject `protobuf:"bytes,1,opt,name=calculation,proto3" json:"calculation,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SampleRequest) Reset()         { *m = SampleRequest{} }
func (m *SampleRequest) String() string { return proto.CompactTextString(m) }
func (*SampleRequest) ProtoMessage()    {}
func (*SampleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_screen_2b97cf54ce565689, []int{1}
}
func (m *SampleRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SampleRequest.Unmarshal(m, b)
}
func (m *SampleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SampleRequest.Marshal(b, m, deterministic)
}
func (dst *SampleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleRequest.Merge(dst, src)
}
func (m *SampleRequest) XXX_Size() int {
	return xxx_messageInfo_SampleRequest.Size(m)
}
func (m *SampleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SampleRequest proto.InternalMessageInfo

func (m *SampleRequest) GetCalculation() *SampleObject {
	if m != nil {
		return m.Calculation
	}
	return nil
}

type SampleResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SampleResponse) Reset()         { *m = SampleResponse{} }
func (m *SampleResponse) String() string { return proto.CompactTextString(m) }
func (*SampleResponse) ProtoMessage()    {}
func (*SampleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_screen_2b97cf54ce565689, []int{2}
}
func (m *SampleResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SampleResponse.Unmarshal(m, b)
}
func (m *SampleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SampleResponse.Marshal(b, m, deterministic)
}
func (dst *SampleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SampleResponse.Merge(dst, src)
}
func (m *SampleResponse) XXX_Size() int {
	return xxx_messageInfo_SampleResponse.Size(m)
}
func (m *SampleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SampleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SampleResponse proto.InternalMessageInfo

func (m *SampleResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type SpeakRequest struct {
	SpeakPhrase          string   `protobuf:"bytes,1,opt,name=speakPhrase,proto3" json:"speakPhrase,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeakRequest) Reset()         { *m = SpeakRequest{} }
func (m *SpeakRequest) String() string { return proto.CompactTextString(m) }
func (*SpeakRequest) ProtoMessage()    {}
func (*SpeakRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_screen_2b97cf54ce565689, []int{3}
}
func (m *SpeakRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakRequest.Unmarshal(m, b)
}
func (m *SpeakRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakRequest.Marshal(b, m, deterministic)
}
func (dst *SpeakRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakRequest.Merge(dst, src)
}
func (m *SpeakRequest) XXX_Size() int {
	return xxx_messageInfo_SpeakRequest.Size(m)
}
func (m *SpeakRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakRequest proto.InternalMessageInfo

func (m *SpeakRequest) GetSpeakPhrase() string {
	if m != nil {
		return m.SpeakPhrase
	}
	return ""
}

type SpeakResponse struct {
	Result               string   `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpeakResponse) Reset()         { *m = SpeakResponse{} }
func (m *SpeakResponse) String() string { return proto.CompactTextString(m) }
func (*SpeakResponse) ProtoMessage()    {}
func (*SpeakResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_screen_2b97cf54ce565689, []int{4}
}
func (m *SpeakResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpeakResponse.Unmarshal(m, b)
}
func (m *SpeakResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpeakResponse.Marshal(b, m, deterministic)
}
func (dst *SpeakResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeakResponse.Merge(dst, src)
}
func (m *SpeakResponse) XXX_Size() int {
	return xxx_messageInfo_SpeakResponse.Size(m)
}
func (m *SpeakResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeakResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpeakResponse proto.InternalMessageInfo

func (m *SpeakResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

func init() {
	proto.RegisterType((*SampleObject)(nil), "screen.SampleObject")
	proto.RegisterType((*SampleRequest)(nil), "screen.SampleRequest")
	proto.RegisterType((*SampleResponse)(nil), "screen.SampleResponse")
	proto.RegisterType((*SpeakRequest)(nil), "screen.SpeakRequest")
	proto.RegisterType((*SpeakResponse)(nil), "screen.SpeakResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ScreenServiceClient is the client API for ScreenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ScreenServiceClient interface {
	Sample(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error)
	Speak(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*SpeakResponse, error)
}

type screenServiceClient struct {
	cc *grpc.ClientConn
}

func NewScreenServiceClient(cc *grpc.ClientConn) ScreenServiceClient {
	return &screenServiceClient{cc}
}

func (c *screenServiceClient) Sample(ctx context.Context, in *SampleRequest, opts ...grpc.CallOption) (*SampleResponse, error) {
	out := new(SampleResponse)
	err := c.cc.Invoke(ctx, "/screen.ScreenService/Sample", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *screenServiceClient) Speak(ctx context.Context, in *SpeakRequest, opts ...grpc.CallOption) (*SpeakResponse, error) {
	out := new(SpeakResponse)
	err := c.cc.Invoke(ctx, "/screen.ScreenService/Speak", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ScreenServiceServer is the server API for ScreenService service.
type ScreenServiceServer interface {
	Sample(context.Context, *SampleRequest) (*SampleResponse, error)
	Speak(context.Context, *SpeakRequest) (*SpeakResponse, error)
}

func RegisterScreenServiceServer(s *grpc.Server, srv ScreenServiceServer) {
	s.RegisterService(&_ScreenService_serviceDesc, srv)
}

func _ScreenService_Sample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).Sample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/screen.ScreenService/Sample",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).Sample(ctx, req.(*SampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ScreenService_Speak_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpeakRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ScreenServiceServer).Speak(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/screen.ScreenService/Speak",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ScreenServiceServer).Speak(ctx, req.(*SpeakRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ScreenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "screen.ScreenService",
	HandlerType: (*ScreenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sample",
			Handler:    _ScreenService_Sample_Handler,
		},
		{
			MethodName: "Speak",
			Handler:    _ScreenService_Speak_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "screenpb/screen.proto",
}

func init() { proto.RegisterFile("screenpb/screen.proto", fileDescriptor_screen_2b97cf54ce565689) }

var fileDescriptor_screen_2b97cf54ce565689 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x41, 0x4b, 0xf4, 0x30,
	0x10, 0xfd, 0xfa, 0x89, 0x65, 0x3b, 0xdd, 0x7a, 0x08, 0x76, 0x91, 0x15, 0x61, 0xc9, 0xc5, 0x3d,
	0xad, 0xb2, 0xc2, 0x82, 0x57, 0x2f, 0xb2, 0x5e, 0x94, 0xf6, 0xe6, 0x45, 0xd2, 0x38, 0x62, 0xb5,
	0x26, 0x31, 0x93, 0xfa, 0x03, 0xfc, 0xe5, 0x62, 0xd2, 0x60, 0x5d, 0xbc, 0xcd, 0x7b, 0x33, 0xf3,
	0xde, 0x1b, 0x06, 0x4a, 0x92, 0x16, 0x51, 0x99, 0xe6, 0x2c, 0x14, 0x2b, 0x63, 0xb5, 0xd3, 0x2c,
	0x0d, 0x88, 0xdf, 0xc0, 0xb4, 0x16, 0x6f, 0xa6, 0xc3, 0xdb, 0xe6, 0x05, 0xa5, 0x63, 0xc7, 0x90,
	0x3d, 0xb5, 0x96, 0xdc, 0x43, 0xab, 0xdc, 0x51, 0xb2, 0x48, 0x96, 0x7b, 0xd5, 0xc4, 0x13, 0x5b,
	0xe5, 0xd8, 0x09, 0x00, 0xa1, 0xd4, 0xea, 0xd1, 0x77, 0xff, 0xfb, 0x6e, 0x16, 0x98, 0xad, 0x72,
	0xfc, 0x1a, 0x8a, 0xa0, 0x55, 0xe1, 0x7b, 0x8f, 0xe4, 0xd8, 0x06, 0x72, 0x29, 0x3a, 0xd9, 0x77,
	0xc2, 0xb5, 0x5a, 0x79, 0xb9, 0x7c, 0x7d, 0xb8, 0x1a, 0x82, 0x8c, 0x7d, 0xab, 0xf1, 0x20, 0x5f,
	0xc2, 0x41, 0x14, 0x22, 0xa3, 0x15, 0x21, 0x9b, 0x41, 0x6a, 0x91, 0xfa, 0x2e, 0x66, 0x1a, 0x10,
	0x3f, 0x87, 0x69, 0x6d, 0x50, 0xbc, 0x46, 0xc7, 0x05, 0xe4, 0xf4, 0x8d, 0xef, 0x9e, 0xad, 0x20,
	0xf4, 0xc3, 0x59, 0x35, 0xa6, 0xf8, 0x29, 0x14, 0xc3, 0xc6, 0x9f, 0xd2, 0x59, 0x94, 0x5e, 0x7f,
	0x26, 0x50, 0xd4, 0x3e, 0x69, 0x8d, 0xf6, 0xa3, 0x95, 0xc8, 0x2e, 0x21, 0x0d, 0xb1, 0x58, 0xf9,
	0xfb, 0x86, 0xc1, 0x7d, 0x3e, 0xdb, 0xa5, 0x83, 0x05, 0xff, 0xc7, 0x36, 0xb0, 0xef, 0x5d, 0xd9,
	0xcf, 0xf5, 0xa3, 0xd8, 0xf3, 0x72, 0x87, 0x8d, 0x7b, 0x57, 0x70, 0x3f, 0x89, 0xff, 0x6b, 0x52,
	0xff, 0xb9, 0x8b, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0x93, 0x45, 0x13, 0xd2, 0x01, 0x00,
	0x00,
}
